package io.flutter.plugins;

import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import io.flutter.Log;

import io.flutter.embedding.engine.FlutterEngine;

/**
 * Generated file. Do not edit.
 * This file is generated by the Flutter tool based on the
 * plugins that support the Android platform.
 */
@Keep
public final class GeneratedPluginRegistrant {
  private static final String TAG = "GeneratedPluginRegistrant";
  public static void registerWith(@NonNull FlutterEngine flutterEngine) {
    try {
      flutterEngine.getPlugins().add(new com.erikas.audiotags.AudiotagsPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin audiotags, com.erikas.audiotags.AudiotagsPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.material.plugins.dynamic_color.DynamicColorPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin dynamic_color, io.material.plugins.dynamic_color.DynamicColorPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.arthenica.ffmpegkit.flutter.FFmpegKitFlutterPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin ffmpeg_kit_flutter_audio, com.arthenica.ffmpegkit.flutter.FFmpegKitFlutterPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.lazycatlabs.media_scanner.MediaScannerPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin media_scanner, com.lazycatlabs.media_scanner.MediaScannerPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.pathprovider.PathProviderPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin path_provider_android, io.flutter.plugins.pathprovider.PathProviderPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new com.baseflow.permissionhandler.PermissionHandlerPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin permission_handler_android, com.baseflow.permissionhandler.PermissionHandlerPlugin", e);
    }
  }
}
